import Head from 'next/head';
import MobileDivider from '../components/MobileDivider';
import DesktopDivider from '../components/DesktopDivider';
import DiceIcon from '../components/DiceIcon';
import { useState, useEffect } from 'react';
import { useMedia } from 'react-use';
import questions from '../public/questions.json';

export default function Home() {
  const isWide = useMedia('(min-width: 768px)', true);
  const [question, setQuestion] = useState({});
  const [category, setCategory] = useState('All');
  const [subcategory, setSubcategory] = useState('All');
  const [isCategorySelected, setIsCategorySelected] = useState(false);

  const fetchQuestion = () => {
    let filteredQuestions = category === 'All' ? questions : questions.filter(q => q.category === category);
    filteredQuestions = subcategory === 'All' ? filteredQuestions : filteredQuestions.filter(q => q.subcategory === subcategory);
    const randomIndex = Math.floor(Math.random() * filteredQuestions.length);
    setQuestion(filteredQuestions[randomIndex]);
  };

  useEffect(() => {
    fetchQuestion();
  }, [category, subcategory]);

  const categories = ['All', ...new Set(questions.map(q => q.category))];
  const subcategories = ['All', ...new Set(questions.filter(q => (category === 'All' || q.category === category) && q.subcategory).map(q => q.subcategory))];


  const handleCategoryChange = (e) => {
    setCategory(e.target.value);
    setSubcategory('All');
    setIsCategorySelected(e.target.value !== 'All');
  }

  return (
    <div className='font-sans flex flex-col min-h-screen bg-darkBlue justify-center relative'>
    <Head>
    <title>Question Generator</title>
    <meta name='description' content='Generated by XYZ' />
    <link rel='icon' href='/favicon.ico' />
    </Head>

    <div className="flex-grow flex flex-col justify-center">
    <main>
    <div className='bg-darkGrayishBlue rounded-lg flex flex-col items-center gap-y-6 mx-3 md:max-w-lg md:mx-auto space-y-4'>
    <select 
    onChange={handleCategoryChange}
    className='bg-neonGreen rounded-md text-darkBlue w-1/2 text-center mb-4 font-extrabold text-[18px]'
    >
    {categories.map((category, index) => 
      <option key={index} value={category}>{category}</option>
      )}
      </select>
      {isCategorySelected && (
        <select 
        onChange={(e) => setSubcategory(e.target.value)}
        className='bg-neonGreen rounded-md text-darkBlue w-1/2 text-center mb-4 font-extrabold text-[14px]'
        >
        {subcategories.map((subcategory, index) => 
          <option key={index} value={subcategory}>{subcategory}</option>
          )}
          </select>
          )}

        <div className="flex flex-col items-center space-y-4">
        <h1 className='text-neonGreen text-xs tracking-[0.3em] font-extrabold pt-10'>
        {`QUESTION #${question.id}`}
        </h1>
        <div className='text-lightCyan text-[28px] text-center font-extrabold px-3 md:px-8'>
        {`"${question.text}"`}
        </div>

        {question.source && (
          <div className='italic text-sm text-lightCyan'>
          <a href={question.source} target="_blank" rel="noopener noreferrer">Source</a>
          </div>
          )}



        <div className='pb-2'>
        {isWide ? <DesktopDivider /> : <MobileDivider />}
        </div>
        <button
        onClick={() => fetchQuestion()}
        type='button'
        className='bg-neonGreen rounded-full p-4 hover:shadow-3xl'
        >
        <DiceIcon />
        </button>
        </div>
        </div>
        </main>
        </div>

        <footer className='text-center text-white bg-darkGrayishBlue p-4 fixed bottom-0 w-full'>
        Made by XYZ
        </footer>
        </div>
        );
      }
